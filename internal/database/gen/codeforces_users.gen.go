// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/suzmii/ACMBot/internal/database/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCodeforcesUser(db *gorm.DB, opts ...gen.DOOption) codeforcesUser {
	_codeforcesUser := codeforcesUser{}

	_codeforcesUser.codeforcesUserDo.UseDB(db, opts...)
	_codeforcesUser.codeforcesUserDo.UseModel(&dbmodel.CodeforcesUser{})

	tableName := _codeforcesUser.codeforcesUserDo.TableName()
	_codeforcesUser.ALL = field.NewAsterisk(tableName)
	_codeforcesUser.ID = field.NewUint(tableName, "id")
	_codeforcesUser.CreatedAt = field.NewTime(tableName, "created_at")
	_codeforcesUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_codeforcesUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_codeforcesUser.Username = field.NewString(tableName, "username")
	_codeforcesUser.AvatarURL = field.NewString(tableName, "avatar_url")
	_codeforcesUser.Organization = field.NewString(tableName, "organization")
	_codeforcesUser.FriendOf = field.NewInt(tableName, "friend_of")
	_codeforcesUser.MaxRating = field.NewInt(tableName, "max_rating")
	_codeforcesUser.CurrentRating = field.NewInt(tableName, "current_rating")
	_codeforcesUser.SubmissionUpdatedAt = field.NewTime(tableName, "submission_updated_at")

	_codeforcesUser.fillFieldMap()

	return _codeforcesUser
}

type codeforcesUser struct {
	codeforcesUserDo

	ALL                 field.Asterisk
	ID                  field.Uint
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	Username            field.String
	AvatarURL           field.String
	Organization        field.String
	FriendOf            field.Int
	MaxRating           field.Int
	CurrentRating       field.Int
	SubmissionUpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c codeforcesUser) Table(newTableName string) *codeforcesUser {
	c.codeforcesUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codeforcesUser) As(alias string) *codeforcesUser {
	c.codeforcesUserDo.DO = *(c.codeforcesUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codeforcesUser) updateTableName(table string) *codeforcesUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Username = field.NewString(table, "username")
	c.AvatarURL = field.NewString(table, "avatar_url")
	c.Organization = field.NewString(table, "organization")
	c.FriendOf = field.NewInt(table, "friend_of")
	c.MaxRating = field.NewInt(table, "max_rating")
	c.CurrentRating = field.NewInt(table, "current_rating")
	c.SubmissionUpdatedAt = field.NewTime(table, "submission_updated_at")

	c.fillFieldMap()

	return c
}

func (c *codeforcesUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codeforcesUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["username"] = c.Username
	c.fieldMap["avatar_url"] = c.AvatarURL
	c.fieldMap["organization"] = c.Organization
	c.fieldMap["friend_of"] = c.FriendOf
	c.fieldMap["max_rating"] = c.MaxRating
	c.fieldMap["current_rating"] = c.CurrentRating
	c.fieldMap["submission_updated_at"] = c.SubmissionUpdatedAt
}

func (c codeforcesUser) clone(db *gorm.DB) codeforcesUser {
	c.codeforcesUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codeforcesUser) replaceDB(db *gorm.DB) codeforcesUser {
	c.codeforcesUserDo.ReplaceDB(db)
	return c
}

type codeforcesUserDo struct{ gen.DO }

func (c codeforcesUserDo) Debug() *codeforcesUserDo {
	return c.withDO(c.DO.Debug())
}

func (c codeforcesUserDo) WithContext(ctx context.Context) *codeforcesUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codeforcesUserDo) ReadDB() *codeforcesUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c codeforcesUserDo) WriteDB() *codeforcesUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c codeforcesUserDo) Session(config *gorm.Session) *codeforcesUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c codeforcesUserDo) Clauses(conds ...clause.Expression) *codeforcesUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codeforcesUserDo) Returning(value interface{}, columns ...string) *codeforcesUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codeforcesUserDo) Not(conds ...gen.Condition) *codeforcesUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codeforcesUserDo) Or(conds ...gen.Condition) *codeforcesUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codeforcesUserDo) Select(conds ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codeforcesUserDo) Where(conds ...gen.Condition) *codeforcesUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codeforcesUserDo) Order(conds ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codeforcesUserDo) Distinct(cols ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codeforcesUserDo) Omit(cols ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codeforcesUserDo) Join(table schema.Tabler, on ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codeforcesUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codeforcesUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codeforcesUserDo) Group(cols ...field.Expr) *codeforcesUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codeforcesUserDo) Having(conds ...gen.Condition) *codeforcesUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codeforcesUserDo) Limit(limit int) *codeforcesUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codeforcesUserDo) Offset(offset int) *codeforcesUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codeforcesUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *codeforcesUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codeforcesUserDo) Unscoped() *codeforcesUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codeforcesUserDo) Create(values ...*dbmodel.CodeforcesUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codeforcesUserDo) CreateInBatches(values []*dbmodel.CodeforcesUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codeforcesUserDo) Save(values ...*dbmodel.CodeforcesUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codeforcesUserDo) First() (*dbmodel.CodeforcesUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesUser), nil
	}
}

func (c codeforcesUserDo) Take() (*dbmodel.CodeforcesUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesUser), nil
	}
}

func (c codeforcesUserDo) Last() (*dbmodel.CodeforcesUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesUser), nil
	}
}

func (c codeforcesUserDo) Find() ([]*dbmodel.CodeforcesUser, error) {
	result, err := c.DO.Find()
	return result.([]*dbmodel.CodeforcesUser), err
}

func (c codeforcesUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.CodeforcesUser, err error) {
	buf := make([]*dbmodel.CodeforcesUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codeforcesUserDo) FindInBatches(result *[]*dbmodel.CodeforcesUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codeforcesUserDo) Attrs(attrs ...field.AssignExpr) *codeforcesUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codeforcesUserDo) Assign(attrs ...field.AssignExpr) *codeforcesUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codeforcesUserDo) Joins(fields ...field.RelationField) *codeforcesUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codeforcesUserDo) Preload(fields ...field.RelationField) *codeforcesUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codeforcesUserDo) FirstOrInit() (*dbmodel.CodeforcesUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesUser), nil
	}
}

func (c codeforcesUserDo) FirstOrCreate() (*dbmodel.CodeforcesUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesUser), nil
	}
}

func (c codeforcesUserDo) FindByPage(offset int, limit int) (result []*dbmodel.CodeforcesUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codeforcesUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codeforcesUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codeforcesUserDo) Delete(models ...*dbmodel.CodeforcesUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codeforcesUserDo) withDO(do gen.Dao) *codeforcesUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
