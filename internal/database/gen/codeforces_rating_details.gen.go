// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"github.com/suzmii/ACMBot/internal/database/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCodeforcesRatingDetail(db *gorm.DB, opts ...gen.DOOption) codeforcesRatingDetail {
	_codeforcesRatingDetail := codeforcesRatingDetail{}

	_codeforcesRatingDetail.codeforcesRatingDetailDo.UseDB(db, opts...)
	_codeforcesRatingDetail.codeforcesRatingDetailDo.UseModel(&dbmodel.CodeforcesRatingRecords{})

	tableName := _codeforcesRatingDetail.codeforcesRatingDetailDo.TableName()
	_codeforcesRatingDetail.ALL = field.NewAsterisk(tableName)
	_codeforcesRatingDetail.UserID = field.NewUint(tableName, "user_id")
	_codeforcesRatingDetail.RatingRecords = field.NewField(tableName, "rating_records")

	_codeforcesRatingDetail.fillFieldMap()

	return _codeforcesRatingDetail
}

type codeforcesRatingDetail struct {
	codeforcesRatingDetailDo

	ALL           field.Asterisk
	UserID        field.Uint
	RatingRecords field.Field

	fieldMap map[string]field.Expr
}

func (c codeforcesRatingDetail) Table(newTableName string) *codeforcesRatingDetail {
	c.codeforcesRatingDetailDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codeforcesRatingDetail) As(alias string) *codeforcesRatingDetail {
	c.codeforcesRatingDetailDo.DO = *(c.codeforcesRatingDetailDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codeforcesRatingDetail) updateTableName(table string) *codeforcesRatingDetail {
	c.ALL = field.NewAsterisk(table)
	c.UserID = field.NewUint(table, "user_id")
	c.RatingRecords = field.NewField(table, "rating_records")

	c.fillFieldMap()

	return c
}

func (c *codeforcesRatingDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codeforcesRatingDetail) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["rating_records"] = c.RatingRecords
}

func (c codeforcesRatingDetail) clone(db *gorm.DB) codeforcesRatingDetail {
	c.codeforcesRatingDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codeforcesRatingDetail) replaceDB(db *gorm.DB) codeforcesRatingDetail {
	c.codeforcesRatingDetailDo.ReplaceDB(db)
	return c
}

type codeforcesRatingDetailDo struct{ gen.DO }

func (c codeforcesRatingDetailDo) Debug() *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Debug())
}

func (c codeforcesRatingDetailDo) WithContext(ctx context.Context) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codeforcesRatingDetailDo) ReadDB() *codeforcesRatingDetailDo {
	return c.Clauses(dbresolver.Read)
}

func (c codeforcesRatingDetailDo) WriteDB() *codeforcesRatingDetailDo {
	return c.Clauses(dbresolver.Write)
}

func (c codeforcesRatingDetailDo) Session(config *gorm.Session) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Session(config))
}

func (c codeforcesRatingDetailDo) Clauses(conds ...clause.Expression) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codeforcesRatingDetailDo) Returning(value interface{}, columns ...string) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codeforcesRatingDetailDo) Not(conds ...gen.Condition) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codeforcesRatingDetailDo) Or(conds ...gen.Condition) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codeforcesRatingDetailDo) Select(conds ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codeforcesRatingDetailDo) Where(conds ...gen.Condition) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codeforcesRatingDetailDo) Order(conds ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codeforcesRatingDetailDo) Distinct(cols ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codeforcesRatingDetailDo) Omit(cols ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codeforcesRatingDetailDo) Join(table schema.Tabler, on ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codeforcesRatingDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codeforcesRatingDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codeforcesRatingDetailDo) Group(cols ...field.Expr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codeforcesRatingDetailDo) Having(conds ...gen.Condition) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codeforcesRatingDetailDo) Limit(limit int) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codeforcesRatingDetailDo) Offset(offset int) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codeforcesRatingDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codeforcesRatingDetailDo) Unscoped() *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codeforcesRatingDetailDo) Create(values ...*dbmodel.CodeforcesRatingRecords) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codeforcesRatingDetailDo) CreateInBatches(values []*dbmodel.CodeforcesRatingRecords, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codeforcesRatingDetailDo) Save(values ...*dbmodel.CodeforcesRatingRecords) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codeforcesRatingDetailDo) First() (*dbmodel.CodeforcesRatingRecords, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesRatingRecords), nil
	}
}

func (c codeforcesRatingDetailDo) Take() (*dbmodel.CodeforcesRatingRecords, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesRatingRecords), nil
	}
}

func (c codeforcesRatingDetailDo) Last() (*dbmodel.CodeforcesRatingRecords, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesRatingRecords), nil
	}
}

func (c codeforcesRatingDetailDo) Find() ([]*dbmodel.CodeforcesRatingRecords, error) {
	result, err := c.DO.Find()
	return result.([]*dbmodel.CodeforcesRatingRecords), err
}

func (c codeforcesRatingDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.CodeforcesRatingRecords, err error) {
	buf := make([]*dbmodel.CodeforcesRatingRecords, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codeforcesRatingDetailDo) FindInBatches(result *[]*dbmodel.CodeforcesRatingRecords, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codeforcesRatingDetailDo) Attrs(attrs ...field.AssignExpr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codeforcesRatingDetailDo) Assign(attrs ...field.AssignExpr) *codeforcesRatingDetailDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codeforcesRatingDetailDo) Joins(fields ...field.RelationField) *codeforcesRatingDetailDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codeforcesRatingDetailDo) Preload(fields ...field.RelationField) *codeforcesRatingDetailDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codeforcesRatingDetailDo) FirstOrInit() (*dbmodel.CodeforcesRatingRecords, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesRatingRecords), nil
	}
}

func (c codeforcesRatingDetailDo) FirstOrCreate() (*dbmodel.CodeforcesRatingRecords, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesRatingRecords), nil
	}
}

func (c codeforcesRatingDetailDo) FindByPage(offset int, limit int) (result []*dbmodel.CodeforcesRatingRecords, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codeforcesRatingDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codeforcesRatingDetailDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codeforcesRatingDetailDo) Delete(models ...*dbmodel.CodeforcesRatingRecords) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codeforcesRatingDetailDo) withDO(do gen.Dao) *codeforcesRatingDetailDo {
	c.DO = *do.(*gen.DO)
	return c
}
