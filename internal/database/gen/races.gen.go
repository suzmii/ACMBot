// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/suzmii/ACMBot/internal/database/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRaces(db *gorm.DB, opts ...gen.DOOption) races {
	_races := races{}

	_races.racesDo.UseDB(db, opts...)
	_races.racesDo.UseModel(&dbmodel.Races{})

	tableName := _races.racesDo.TableName()
	_races.ALL = field.NewAsterisk(tableName)
	_races.ID = field.NewUint(tableName, "id")
	_races.CreatedAt = field.NewTime(tableName, "created_at")
	_races.UpdatedAt = field.NewTime(tableName, "updated_at")
	_races.DeletedAt = field.NewField(tableName, "deleted_at")
	_races.Resource = field.NewInt(tableName, "resource")
	_races.Title = field.NewString(tableName, "title")
	_races.StartAt = field.NewTime(tableName, "start_at")
	_races.EndAt = field.NewTime(tableName, "end_at")
	_races.Link = field.NewString(tableName, "link")

	_races.fillFieldMap()

	return _races
}

type races struct {
	racesDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Resource  field.Int
	Title     field.String
	StartAt   field.Time
	EndAt     field.Time
	Link      field.String

	fieldMap map[string]field.Expr
}

func (r races) Table(newTableName string) *races {
	r.racesDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r races) As(alias string) *races {
	r.racesDo.DO = *(r.racesDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *races) updateTableName(table string) *races {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.Resource = field.NewInt(table, "resource")
	r.Title = field.NewString(table, "title")
	r.StartAt = field.NewTime(table, "start_at")
	r.EndAt = field.NewTime(table, "end_at")
	r.Link = field.NewString(table, "link")

	r.fillFieldMap()

	return r
}

func (r *races) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *races) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["resource"] = r.Resource
	r.fieldMap["title"] = r.Title
	r.fieldMap["start_at"] = r.StartAt
	r.fieldMap["end_at"] = r.EndAt
	r.fieldMap["link"] = r.Link
}

func (r races) clone(db *gorm.DB) races {
	r.racesDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r races) replaceDB(db *gorm.DB) races {
	r.racesDo.ReplaceDB(db)
	return r
}

type racesDo struct{ gen.DO }

func (r racesDo) Debug() *racesDo {
	return r.withDO(r.DO.Debug())
}

func (r racesDo) WithContext(ctx context.Context) *racesDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r racesDo) ReadDB() *racesDo {
	return r.Clauses(dbresolver.Read)
}

func (r racesDo) WriteDB() *racesDo {
	return r.Clauses(dbresolver.Write)
}

func (r racesDo) Session(config *gorm.Session) *racesDo {
	return r.withDO(r.DO.Session(config))
}

func (r racesDo) Clauses(conds ...clause.Expression) *racesDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r racesDo) Returning(value interface{}, columns ...string) *racesDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r racesDo) Not(conds ...gen.Condition) *racesDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r racesDo) Or(conds ...gen.Condition) *racesDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r racesDo) Select(conds ...field.Expr) *racesDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r racesDo) Where(conds ...gen.Condition) *racesDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r racesDo) Order(conds ...field.Expr) *racesDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r racesDo) Distinct(cols ...field.Expr) *racesDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r racesDo) Omit(cols ...field.Expr) *racesDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r racesDo) Join(table schema.Tabler, on ...field.Expr) *racesDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r racesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *racesDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r racesDo) RightJoin(table schema.Tabler, on ...field.Expr) *racesDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r racesDo) Group(cols ...field.Expr) *racesDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r racesDo) Having(conds ...gen.Condition) *racesDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r racesDo) Limit(limit int) *racesDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r racesDo) Offset(offset int) *racesDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r racesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *racesDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r racesDo) Unscoped() *racesDo {
	return r.withDO(r.DO.Unscoped())
}

func (r racesDo) Create(values ...*dbmodel.Races) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r racesDo) CreateInBatches(values []*dbmodel.Races, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r racesDo) Save(values ...*dbmodel.Races) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r racesDo) First() (*dbmodel.Races, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Races), nil
	}
}

func (r racesDo) Take() (*dbmodel.Races, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Races), nil
	}
}

func (r racesDo) Last() (*dbmodel.Races, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Races), nil
	}
}

func (r racesDo) Find() ([]*dbmodel.Races, error) {
	result, err := r.DO.Find()
	return result.([]*dbmodel.Races), err
}

func (r racesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.Races, err error) {
	buf := make([]*dbmodel.Races, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r racesDo) FindInBatches(result *[]*dbmodel.Races, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r racesDo) Attrs(attrs ...field.AssignExpr) *racesDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r racesDo) Assign(attrs ...field.AssignExpr) *racesDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r racesDo) Joins(fields ...field.RelationField) *racesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r racesDo) Preload(fields ...field.RelationField) *racesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r racesDo) FirstOrInit() (*dbmodel.Races, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Races), nil
	}
}

func (r racesDo) FirstOrCreate() (*dbmodel.Races, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Races), nil
	}
}

func (r racesDo) FindByPage(offset int, limit int) (result []*dbmodel.Races, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r racesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r racesDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r racesDo) Delete(models ...*dbmodel.Races) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *racesDo) withDO(do gen.Dao) *racesDo {
	r.DO = *do.(*gen.DO)
	return r
}
