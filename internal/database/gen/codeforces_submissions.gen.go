// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/suzmii/ACMBot/internal/database/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCodeforcesSubmission(db *gorm.DB, opts ...gen.DOOption) codeforcesSubmission {
	_codeforcesSubmission := codeforcesSubmission{}

	_codeforcesSubmission.codeforcesSubmissionDo.UseDB(db, opts...)
	_codeforcesSubmission.codeforcesSubmissionDo.UseModel(&dbmodel.CodeforcesSubmission{})

	tableName := _codeforcesSubmission.codeforcesSubmissionDo.TableName()
	_codeforcesSubmission.ALL = field.NewAsterisk(tableName)
	_codeforcesSubmission.ID = field.NewUint(tableName, "id")
	_codeforcesSubmission.CreatedAt = field.NewTime(tableName, "created_at")
	_codeforcesSubmission.UpdatedAt = field.NewTime(tableName, "updated_at")
	_codeforcesSubmission.DeletedAt = field.NewField(tableName, "deleted_at")
	_codeforcesSubmission.UserID = field.NewUint(tableName, "user_id")
	_codeforcesSubmission.Pass = field.NewBool(tableName, "pass")
	_codeforcesSubmission.ProblemID = field.NewString(tableName, "problem_id")
	_codeforcesSubmission.ProblemRating = field.NewInt(tableName, "problem_rating")
	_codeforcesSubmission.Language = field.NewString(tableName, "language")
	_codeforcesSubmission.Status = field.NewString(tableName, "status")

	_codeforcesSubmission.fillFieldMap()

	return _codeforcesSubmission
}

type codeforcesSubmission struct {
	codeforcesSubmissionDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	UserID        field.Uint
	Pass          field.Bool
	ProblemID     field.String
	ProblemRating field.Int
	Language      field.String
	Status        field.String

	fieldMap map[string]field.Expr
}

func (c codeforcesSubmission) Table(newTableName string) *codeforcesSubmission {
	c.codeforcesSubmissionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codeforcesSubmission) As(alias string) *codeforcesSubmission {
	c.codeforcesSubmissionDo.DO = *(c.codeforcesSubmissionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codeforcesSubmission) updateTableName(table string) *codeforcesSubmission {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.UserID = field.NewUint(table, "user_id")
	c.Pass = field.NewBool(table, "pass")
	c.ProblemID = field.NewString(table, "problem_id")
	c.ProblemRating = field.NewInt(table, "problem_rating")
	c.Language = field.NewString(table, "language")
	c.Status = field.NewString(table, "status")

	c.fillFieldMap()

	return c
}

func (c *codeforcesSubmission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codeforcesSubmission) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["pass"] = c.Pass
	c.fieldMap["problem_id"] = c.ProblemID
	c.fieldMap["problem_rating"] = c.ProblemRating
	c.fieldMap["language"] = c.Language
	c.fieldMap["status"] = c.Status
}

func (c codeforcesSubmission) clone(db *gorm.DB) codeforcesSubmission {
	c.codeforcesSubmissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codeforcesSubmission) replaceDB(db *gorm.DB) codeforcesSubmission {
	c.codeforcesSubmissionDo.ReplaceDB(db)
	return c
}

type codeforcesSubmissionDo struct{ gen.DO }

func (c codeforcesSubmissionDo) Debug() *codeforcesSubmissionDo {
	return c.withDO(c.DO.Debug())
}

func (c codeforcesSubmissionDo) WithContext(ctx context.Context) *codeforcesSubmissionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codeforcesSubmissionDo) ReadDB() *codeforcesSubmissionDo {
	return c.Clauses(dbresolver.Read)
}

func (c codeforcesSubmissionDo) WriteDB() *codeforcesSubmissionDo {
	return c.Clauses(dbresolver.Write)
}

func (c codeforcesSubmissionDo) Session(config *gorm.Session) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Session(config))
}

func (c codeforcesSubmissionDo) Clauses(conds ...clause.Expression) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codeforcesSubmissionDo) Returning(value interface{}, columns ...string) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codeforcesSubmissionDo) Not(conds ...gen.Condition) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codeforcesSubmissionDo) Or(conds ...gen.Condition) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codeforcesSubmissionDo) Select(conds ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codeforcesSubmissionDo) Where(conds ...gen.Condition) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codeforcesSubmissionDo) Order(conds ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codeforcesSubmissionDo) Distinct(cols ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codeforcesSubmissionDo) Omit(cols ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codeforcesSubmissionDo) Join(table schema.Tabler, on ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codeforcesSubmissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codeforcesSubmissionDo) RightJoin(table schema.Tabler, on ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codeforcesSubmissionDo) Group(cols ...field.Expr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codeforcesSubmissionDo) Having(conds ...gen.Condition) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codeforcesSubmissionDo) Limit(limit int) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codeforcesSubmissionDo) Offset(offset int) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codeforcesSubmissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codeforcesSubmissionDo) Unscoped() *codeforcesSubmissionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codeforcesSubmissionDo) Create(values ...*dbmodel.CodeforcesSubmission) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codeforcesSubmissionDo) CreateInBatches(values []*dbmodel.CodeforcesSubmission, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codeforcesSubmissionDo) Save(values ...*dbmodel.CodeforcesSubmission) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codeforcesSubmissionDo) First() (*dbmodel.CodeforcesSubmission, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesSubmission), nil
	}
}

func (c codeforcesSubmissionDo) Take() (*dbmodel.CodeforcesSubmission, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesSubmission), nil
	}
}

func (c codeforcesSubmissionDo) Last() (*dbmodel.CodeforcesSubmission, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesSubmission), nil
	}
}

func (c codeforcesSubmissionDo) Find() ([]*dbmodel.CodeforcesSubmission, error) {
	result, err := c.DO.Find()
	return result.([]*dbmodel.CodeforcesSubmission), err
}

func (c codeforcesSubmissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.CodeforcesSubmission, err error) {
	buf := make([]*dbmodel.CodeforcesSubmission, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codeforcesSubmissionDo) FindInBatches(result *[]*dbmodel.CodeforcesSubmission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codeforcesSubmissionDo) Attrs(attrs ...field.AssignExpr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codeforcesSubmissionDo) Assign(attrs ...field.AssignExpr) *codeforcesSubmissionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codeforcesSubmissionDo) Joins(fields ...field.RelationField) *codeforcesSubmissionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codeforcesSubmissionDo) Preload(fields ...field.RelationField) *codeforcesSubmissionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codeforcesSubmissionDo) FirstOrInit() (*dbmodel.CodeforcesSubmission, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesSubmission), nil
	}
}

func (c codeforcesSubmissionDo) FirstOrCreate() (*dbmodel.CodeforcesSubmission, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.CodeforcesSubmission), nil
	}
}

func (c codeforcesSubmissionDo) FindByPage(offset int, limit int) (result []*dbmodel.CodeforcesSubmission, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codeforcesSubmissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codeforcesSubmissionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codeforcesSubmissionDo) Delete(models ...*dbmodel.CodeforcesSubmission) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codeforcesSubmissionDo) withDO(do gen.Dao) *codeforcesSubmissionDo {
	c.DO = *do.(*gen.DO)
	return c
}
